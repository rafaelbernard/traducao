<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 350644 Maintainer: royopa Status: ready --><!-- CREDITS: bruno@disvolvi.com, royopa, fabioluciano, adiel -->
<appendix xml:id="migration51" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Migrando do PHP 5.0.x para PHP 5.1.x</title>
 <para>
  &manual.migration.seealso;
  <link linkend="migration5">5.0.x</link>,
  <link linkend="migration52">5.2.x</link>,
  <link linkend="migration53">5.3.x</link>,
  <link linkend="migration54">5.4.x</link>,
  <link linkend="migration55">5.5.x</link> e
  <link linkend="migration56">5.6.x</link>.
 </para>

 <section xml:id="migration51.changes">
  <title>Principais funcionalidades do PHP 5.1.x</title>
  <para>
   Algumas das principais características do PHP 5.1.x incluem:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Uma completa reescrita do código de manipulação de dados, com melhorias no suporte do timezone.
    </para>
   </listitem>
   <listitem>
    <para>
     Um significante ganho de performance comparado ao PHP 5.0.X.
    </para>
   </listitem>
   <listitem>
    <para>
     Extensão PDO agora vem ativa por padrão.
    </para>
   </listitem>
   <listitem>
    <para>
     Mais de 30 novas funções em várias extensões e funcionalidades internas.
    </para>
   </listitem>
   <listitem>
    <para>
     Mais de 400 correções de bugs.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="migration51.references">
  <title>Modificações na manipulação de referencias</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.references-overview">Visão geral</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-fails">Código que funcionava do PHP 4.3.X, mas agora falha</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-error">Código que funcionava do PHP 4.3.X, mas agora dispara um erro</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-works">Código que funcionava no PHP 4.3.x, mas agora funciona</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-didnotwork">Código que deveria ter funcionado no PHP 5.0.x</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-warnings">Avisos que vem e vão</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.references-overview">
   <title>Visão geral</title>
   <para>
    Do ponto de vista do desenvolvedor PHP, as mudanças que mais impacta o código legado é a maneira que as referências são manipuladas em todas as versões posteriores ao PHP 4.4.0.
   </para>
   <para>
    Até a versão 4.3, era possível enviar, definir ou retornar variáveis por referência o que deveria ser retornado por valor, como uma constante, um valor temporário (ex. o resultado de uma expressão), ou o resultado de uma função que retorna um valor, como abaixo:
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = "123";

function return_value() {
    global $foo;
    return $foo;
}

$bar = &return_value();
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    Embora esse código deveria funcionar como esperado abaixo da versão 4.3 do PHP, na maioria dos casos o resultado é indefinido. A Zend Engine não pode efetivamente corrigir um desses valores como referência. Esse bug pode e levava a vários problemas de memória, particularmente onde a base de código é muito grande.
   </para>
   <para>
    No PHP 4.4.0, PHP 5.0.4 e todos as versões subsequentes, a Engine foi corrigida para 'saber' quando a operação de referência é usada em um valor que não deveria ser referenciada. O valor atual agora é usado nesses casos, e um alerta é emitido. Esse alerta toma a forma de um
    <constant>E_NOTICE</constant> no PHP 4.4.0 e superior, e
    <constant>E_STRICT</constant> no PHP 5.0.4 e superior.
   </para>
   <para>
    Código que pode potencialmente ocasionar problemas de memória agora não pode mais. Entretanto, algum código legado pode funcionar diferente por causa disso.
   </para>
  </section>

  <section xml:id="migration51.references-fails">
   <title>Código que funcionava no PHP 4.3, mas agora falha</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func(&$arraykey) {
    return $arraykey; // function returns by value!
}

$array = array('a', 'b', 'c');
foreach (array_keys($array) as $key) {
    $y = &func($array[$key]);
    $z[] =& $y;
}

var_dump($z);
?>
<]]>
    </programlisting>
    <para>
     Rodando o código acima em qualquer versão do PHP que precede a correção da referência irá retornar a seguinte saída:
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "a"
  [1]=>
  &string(1) "b"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
    <para>
     Após a correção da referência, o mesmo código irá retornar o seguinte resultado:
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "c"
  [1]=>
  &string(1) "c"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
   </informalexample>
   <para>
    Isso ocorre porque a função <literal>func()</literal>
    é por valor. O valor de <varname>$y</varname> é redefinido, e a referência é preservada de <varname>$z</varname>. Antes da correção, o valor foi atribuído por referência, levando <varname>$y</varname>
    para ser re-ligada a cada a cada atribuíção. A tentativa de ligar a cada valor de referência foi a causa do problema de memória.
   </para>
   <para>
    O código pode ser feito para funcionar da mesma forma em ambas as versões do PHP antes e depois da correção. A definição da <literal>func()</literal> pode ser alterada para retornar por referência, ou a definição da referência pode ser removida do resultado da <literal>func()</literal>.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func() {
    return 'function return';
}

$x = 'original value';
$y =& $x;
$y = &func();
echo $x;
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    No PHP 4.3 <varname>$x</varname> pode ser 'valor original', onde depois das alterações deverá ser 'o retorno da função' - lembre-se que onde a função não retorna por referência, a definição da referência é convertida em uma definição regular. Novamente, isso pode ser trazido a uma base comum, tanto forçando <literal>func()</literal> para retornar por referência, quanto eliminando a definição por referência.
   </para>
  </section>

  <section xml:id="migration51.references-error">
   <title>Código que funcionava no PHP 4.3.x, mas agora dispara um erro</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {

    function getThis() {
        return $this;
    }

    function destroyThis() {
        $bar =& $this->getThis();
    }
}

$bar = new Foo();
$bar->destroyThis();
var_dump($bar);
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    No PHP 5.0.3, <varname>$bar</varname> se torna <constant>NULL</constant> ao invés de retornar um objeto. Isso acontece porque
    <literal>getThis()</literal> retorna por valor, mas o valor aqui é definido por referência. Embora isso agora funcione da forma esperada, é na verdade um código inválido e irá disparar um <constant>E_NOTICE</constant>
    no PHP 4.4 e inferior ou um <constant>E_STRICT</constant> no PHP 5.0.4 e superior.
   </para>
  </section>

  <section xml:id="migration51.references-works">
   <title>Código que funcionava no PHP 4.3.x, mas agora funciona</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &f() {
    $x = "foo";
    var_dump($x);
    print "$x\n";
    return($a);
}

for ($i = 0; $i < 3; $i++) {
    $h = &f();
}
?>
]]>
    </programlisting>
    <para>
     No PHP 4.3 a terceira linha <function>var_dump</function> retorna
     <constant>NULL</constant>, por causa do retorno de um valor não inicializado por referência. Esse cógido é valido no PHP 5.0.4 e superior, mas dispara um erro em versões mais antigas do PHP.
    </para>
   </informalexample>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array('a1' => array('alfa' => 'ok'));
$arr =& $arr['a1'];
echo '-'.$arr['alfa']."-\n";
?>
]]>
    </programlisting>
    <para>
     Antes do PHP 5.0.5, não era possível atribuír um array por referência dessa maneira. Agora é.
    </para>
   </informalexample>
  </section>

  <section xml:id="migration51.references-didnotwork">
   <title>Código que <literal>deveria ter funcionado</literal> abaixo do PHP 5.0.x</title>
   <para>
    Há um conjunto de bugs reportados abaixo do PHP 5.0.5 que antes das correções da referência que agora 'funcionam'. Entretanto, em ambos os casos erros são disparados pelo PHP 5.1.x, porque o código estava inválido desde o início. Retornar valores por referência usando <literal>self::</literal> na maioria dos casos mas dispara um <constant>E_STRICT</constant> alerta,
    e apesar de seu tamanho poder variar quando atribuído por referência para um objeto sobrecarregado, você verá um <constant>E_ERROR</constant>
    quando você tentar, mesmo onde a própria atribuição parece funcionar.
   </para>
  </section>

  <section xml:id="migration51.references-warnings">
   <title>Avisos que vem e vão</title>
   <para>
    Chamadas aninhadas para funções que retornam por referência são códigos válidos para ambas as versões de PHP 4.3.x e PHP 5.1.x, mas disparam um aviso <constant>E_NOTICE</constant> ou <constant>E_STRICT</constant> nessas versões de PHP.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function & foo() {
    $var = 'ok';
    return $var;
}

function & bar() {
    return foo();
}

$a =& bar();
echo "$a\n";
?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section>
 <section xml:id="migration51.reading">
  <title>Lendo arrays</title>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class XmlTest {

    function test_ref(&$test) {
        $test = "ok";
    }

    function test($test) { }

    function run() {
        $ar = array();
        $this->test_ref($ar[]);
        var_dump($ar);
        $this->test($ar[]);
    }
}

$o = new XmlTest();
$o->run();
?>
]]>
   </programlisting>
  </informalexample>
  <para>
   Ele deve sempre disparar um fatal <constant>E_ERROR</constant>,
   porque o array não pode ser usado para leitura em PHP. Isso é um código inválido em PHP 4.4.2 e PHP 5.0.5 ou superior.
  </para>
 </section>

 <section xml:id="migration51.integer-parameters">
  <title>Valores inteiros em parâmetros de função</title>
  <para>
   Com a vinda do PHP 5.0.x, uma nova API de parsing de parâmetros foi introduzida onde está sendo usada por um grande número de funções PHP. Em todas as versões do PHP entre 5.0.x e 5.1.x, a manipulação de valores inteiros era bem restrita e rejeitava valores numéricos não bem formatados quando uma função PHP esperava um inteiro. Essas verificações agora foram simplificadas para suportar formatos de string numéricas como " 123" e "123 ", e não irão mais falhar como acontecia em versões anterioreres a PHP 5.0.x. Por outro lado, para garantir a segurança do código e a validação da entrada, as funções PHP agora irão emitir um <constant>E_NOTICE</constant> quando essas strings forem passadas como inteiros.
  </para>
 </section>

 <section xml:id="migration51.oop">
  <title>Mudanças em classes e objetos</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.oop-functions"><literal>instanceof</literal>,
      <literal>is_a()</literal>, <literal>is_subclass_of()</literal> and
      <literal>catch</literal></link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-methods">Métodos privados abstratos</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-modifiers">Modificadores de acesso em interfaces</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-inheritance">Mudanças nas regras de herança</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-constants">Constantes de classe</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.oop-functions">
   <title><literal>instanceof</literal>, <literal>is_a()</literal>,
    <literal>is_subclass_of()</literal> and <literal>catch</literal></title>
   <para>
    No PHP 5.0, <literal>is_a()</literal> foi depreciada e substituída pelo operador <literal>instanceof</literal>. Existem alguns prolbemas com a implementação inicial do <literal>instanceof</literal>, que usou o <literal>__autoload()</literal> para buscar missing classes.
    Se a classe não estava presente, <literal>instanceof</literal> irá disparar um fatal <constant>E_ERROR</constant> devido a falha do <literal>__autoload()</literal> em encontrar a classe. O mesmo comportamento ocorrido no operador <literal>catch</literal> e na função <literal>is_subclass_of()</literal>, por essa mesma razão.
   </para>
   <para>
    Nenhuma dessas funções ou chamadas de operadores <literal>__autoload()</literal> no PHP 5.1.x, e <literal>class_exists()</literal> foram soluções alternativas usadas no código escrito para PHP 5.0.x, enquanto não causava problemas dessa maneira, não são mais necessários.
   </para>
  </section>

  <section xml:id="migration51.oop-methods">
   <title>Métodos privados abstratos</title>
   <para>
    Métodos privados abstratos foram suportados entre o PHP 5.0.0 e PHP 5.0.4, mas eles foram desabilitados no escopo onde o comportamento <literal>private</literal> e <literal>abstract</literal> são mutualmente exclusivos.
   </para>
  </section>

  <section xml:id="migration51.oop-modifiers">
   <title>Modificadores de acesso em interfaces</title>
   <para>
    Versões abaixo do PHP 5.0, declaração de funções em interfaces eram tratadas exatamente da mesma maneira que declaração de funções em classes. Isto não era caso desde outubro de 2004, onde apontava apenas o modificador de acesso <literal>public</literal>
    era permitido nas declarações de funções de interface. Desde abril de 2005 - que antecede a versão do PHP 5.0b1 - o modificador <literal>static</literal> também foi permitido. Entretanto, os modificadores <literal>protected</literal> e <literal>private</literal> não irão disparar um <constant>E_ERROR</constant>, bem como <literal>abstract</literal>. Note que essa mudança não irá afetar o seu código existente, como nenhum desses modificadores fazem sentido num contexto de interface.
   </para>
  </section>

  <section xml:id="migration51.oop-inheritance">
   <title>Mudanças nas regras de herança</title>
   <para>
    Em versões anteriores ao PHP 5.0, era possível ter a declaração da função em uma classe derivada que não corresponde com a declaração da mesma função na classe base, ex.
   </para>
   <informalexample>
    <para>
     Esse código irá causar um erro <constant>E_STRICT</constant> para ser emitido em versões anteriores ao PHP 5.1.x.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    function &return_by_ref() {
        $r = 1;
        return $r;
    }
}

class Derived extends Base {
    function return_by_ref() {
        return 1;
    }
}
?>
]]>
    </programlisting>
   </informalexample>
  </section>

  <section xml:id="migration51.oop-constants">
   <title>Constantes de classe</title>
   <para>
    Em versões abaixo do PHP 5.0.x, o código a seguir era válido:
   </para>
   <informalexample>
    <para>
     Em versões abaixo do PHP 5.1.x, redefinir a constante de uma classe irá disparar um fatal <constant>E_ERROR</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class test {
    const foobar = 'foo';
    const foobar = 'bar';
}

?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section>

 <section xml:id="migration51.extensions">
  <title>Extensões</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.extensions-gone">Extensões removidas do core do PHP</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.extensions-constants">Constantes de classe nas novas extensões do PHP 5.1.x</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.extensions-gone">
   <title>Extensões removidas do core do PHP</title>
   <para>
    Uma das primeiras coisas que você vai gostar de ver quando baixar o PHP 5.1.x é o desaparecimento de algumas extensões antigas. Essas extensões que ainda são ativamente mantidas estão disponíveis na PHP Extension Community Library (PECL), no
    <link xlink:href="&url.pecl;">&url.pecl;</link>.
   </para>
   <table>
    <title>Extensões removidas</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Extensões</entry>
       <entry>Alternativa/Status</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>ext/cpdf</entry>
       <entry><link linkend="ref.pdf">pecl/pdflib</link></entry>
      </row>
      <row>
       <entry><link linkend="ref.dbx">ext/dbx</link></entry>
       <entry>pecl/dbx</entry>
      </row>
      <row>
       <entry><link linkend="ref.dio">ext/dio</link></entry>
       <entry>pecl/dio</entry>
      </row>
      <row>
       <entry>ext/fam</entry>
       <entry>Não ativamente mantida</entry>
      </row>
      <row>
       <entry><link linkend="ref.ingres">ext/ingres_ii</link></entry>
       <entry>pecl/ingres</entry>
      </row>
      <row>
       <entry>ext/ircg</entry>
       <entry>Não ativamente mantida</entry>
      </row>
      <row>
       <entry>ext/mcve</entry>
       <entry>pecl/mcve</entry>
      </row>
      <row>
       <entry>ext/mnogosearch</entry>
       <entry>Não ativamente mantida</entry>
      </row>
      <row>
       <entry>ext/oracle</entry>
       <entry>
        <link linkend="ref.oci8">ext/oci8</link> or
        <link linkend="ref.pdo-oci">ext/pdo_oci</link>
       </entry>
      </row>
      <row>
       <entry>ext/ovrimos</entry>
       <entry>Não ativamente mantida</entry>
      </row>
      <row>
       <entry>ext/pfpro</entry>
       <entry>Não ativamente mantida</entry>
      </row>
      <row>
       <entry>ext/w32api</entry>
       <entry><link xlink:href="&url.pecl.package;ffi">pecl/ffi</link></entry>
      </row>
      <row>
       <entry>ext/yp</entry>
       <entry>Não ativamente mantida</entry>
      </row>
      <row>
       <entry>ext/activescript</entry>
       <entry>
        <link xlink:href="&url.pecl.package;activescript">pecl/activescript</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Módulos na PECL que não são ativamente mantidas (ex. não recebem suporte por algum tempo, não tem nenhum mantenedor ativo trabalhando neles atualmente e não tem nenhuma versão de pacote PECL), ainda estão disponíveis no SVN em <link xlink:href="&url.php.svn;pecl">&url.php.svn;pecl</link>.
    Entretanto, módulos PHP não lançados são nativamente não suportados e seu tamanho pode variar ao tentar instalá-lo ou usá-los.
   </para>
  </section>

  <section xml:id="migration51.extensions-constants">
   <title>Constantes de classe nas novas extensões do PHP 5.1.x</title>
   <para>
    A API Zend Engine permite que desenvolvedores de extensão declarem constantes de classe em extensões orientadas a objetos. Novas extensões desenvolvidas para o PHP 5.1.x, incluindo <link linkend="ref.spl">SPL</link>,
    <link linkend="intro.pdo">PDO</link>,
    <link linkend="book.xmlreader">XMLReader</link> e
    <link linkend="ref.datetime">date</link>, tem suas constantes no formato <constant>PDO::CLASS_CONSTANT</constant> diferentemente do formato C <constant>PDO_CLASS_CONSTANT</constant> com o objetivo de minimizar a poluição de namespace global no PHP.
   </para>
  </section>
 </section>

 <section xml:id="migration51.datetime">
  <title>Suporte a Date/time</title>
  <para>
   O suporte a Date/time foi totalmente reescrito no PHP 5.1.x, e não utiliza mais as configurações de sistema para 'saber' o timezone em operação. Ao invés disso, irá utilizar na seguinte ordem:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     A definição do timezone usando a função <function>date_default_timezone_set</function> (se não houver)
    </para>
   </listitem>
   <listitem>
    <para>
     A variável de ambiente TZ (se não estiver vazia)
    </para>
   </listitem>
   <listitem>
    <para>
     "magical" guess (se o sistema operacional suportar)
    </para>
   </listitem>
   <listitem>
    <para>
     Se nenhuma dessas opções forem bem sucedidas, UTC
    </para>
   </listitem>
  </itemizedlist>
  <informalexample>
   <para>
    Para assegurar precisão (e evitar um alerta <constant>E_STRICT</constant>), você precisará definir o seu timezone no <filename>php.ini</filename>
    usando o seguinte formato:
   </para>
   <para>
    date.timezone = America/Sao_Paulo
   </para>
  </informalexample>
  <para>
   Os timezones suportados são listados, nesse formato, no <link linkend="timezones">apêndize de timezones</link>.
  </para>
  <para>
   Também note que <function>strtotime</function> agora retorna &false; ao falhar, ao invés de -1.
  </para>
 </section>

 <section xml:id="migration51.databases">
  <title>Mudanças no suporte a banco de dados</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.databases-pdo">Visão geral do PDO</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-mysql">Mudanças no suporte ao MySQL</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-sqlite">Mudanças no suporte ao SQLite</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.databases-pdo">
   <title>Visão geral do PDO</title>
   <para>
    <link linkend="intro.pdo">PHP Data Objects (PDO)</link> foram
    introduzidos como uma extensão PECL em versões anteriores ao PHP
    5.0, e se tornaram parte do core do PHP na versão PHP 5.1.x. A
    extensão PDO disponibiliza uma interface consistente para acesso a banco de dados, e é usado paralelamente aos drivers PDO específicos para cada banco de dados. Cada driver também pode ter
    funções específicas próprias, mas a funcionalidade básica de acesso aos dados tais como consultas e busca de dados são
    cobertas por funções do PDO, usando o driver nomeado em
    <function>PDO::__construct</function>.
   </para>
   <para>
    Note que a extensão PDO. e seus drivers, destinam-se a ser construídos como extensões compartilhadas. Isso irá permitir atualizações diretas do PECL, sem forçá-lo a recompilar todo o PHP.
   </para>
   <para>
    No momento do lançamento da versão do PHP 5.1.x, o PDO está mais do que pronto para testes gerais e pode ser utilizado na maioria das situações.
    Entretanto, é importante entender que o PDO e seus drivers são
    relativamente novos e podem faltar certas características específicas; analise cuidadosamente o PDO antes de usá-lo em novos projetos.
   </para>
   <para>
    Código legado geralmente conta com extensões de banco de dados pré-existentes, que ainda são mantidas.
   </para>
  </section>

  <section xml:id="migration51.databases-mysql">
   <title>Mudanças no suporte ao MySQL</title>
   <para>
    No PHP 4, MySQL 3 era suportado nativamente. Com o lançamento do PHP 5.0 houveram duas novas extensões do MySQL, chamadas 'mysql' e 'mysqli', que foram designadas para dar suporte ao MySQL &lt; 4.1 e MySQL 4.1 e superiores, respectivamente. Com a introdução do PDO, que proprociona uma interface muito rápida para todas as APIs de banco de dados suportadas pelo PHP, o driver PDO_MYSQL pode suportar qualquer uma da versões atuais (MySQL 3, 4 or 5) de código PHP desenvolvido para PDO, dependendo da versão da biblioteca MySQL usada durante a compilação. As extensões antigas do MySQL continuam por razões de retrocompatibilidade, mas não vem habilitadas por padrão.
   </para>
  </section>

  <section xml:id="migration51.databases-sqlite">
   <title>Mudanças no suporta ao SQLite</title>
   <para>
    No PHP 5.0.x, o suporte ao SQLite 2 foi fornecido pela extensão interna sqlite, que também está disponível como uma extensão do PECL no PHP 4.3 e PHP 4.4. Com a introdução od PDO, a extensão sqlite age como um driver 'sqlite2' para o PDO; é devido a isso que a extensão sqlite no PHP 5.1.x tem uma dependência sobre a extensão PDO.
   </para>
   <para>
    PHP 5.1.x disponibiliza várias alternativas de interface ao sqlite:
   </para>
   <para>
    A extensão do sqlite disponibiliza a "clássica" API procedural/OO sqlite que você deve ter usado em versões anteriores do PHP. Isto também disponibiliza o driver PDO
    'sqlite2', que permite você a acessar banco de dados SQLite 2 legados usando API PDO.
   </para>
   <para>
    PDO_SQLITE disponibiliza a versão 3 do driver 'sqlite'. A versão 3 do SQLite é muito superior a versão 2 do SQLite, mas os formatos de arquivo entre as as versões não são compatíveis.
   </para>
   <para>
    Se o seu projeto baseado em SQLite já foi desenvolvido e foi escrito em versões anteriores do PHP, então você pode continuar usando ext/sqlite sem problemas, mas você precisará habilitar explicitamento o PDO e sqlite. Novos projetos devem usar o PDO e o driver 'sqlite' (versão 3), que é mais rápido que o SQLite 2, teve melhorias de concorrências e locks, e no suporte de prepared statements e binary columns nativamente.
   </para>
   <para>
    Você deve habilitar o PDO para usar a extensão SQLite. Se você quiser desenvolver a extensão PD0 como uma extensao compartilhada, então a extensão SQLite também deve ser desenvolvida como compartilhada. O mesmo se mantém verdadeiro para qualquer extensão que disponibiliza um driver PD0.
   </para>
  </section>
 </section> <!-- end of migration51.databases -->

 <section xml:id="migration51.errorcheck">
  <title>Veriricação para <constant>E_STRICT</constant></title>
  <informalexample>
   <para>
    Se você tem apenas um único script para verficar, você pode escolher os erros <constant>E_STRICT</constant> usando a linha de comando do PHP:
   </para>
   <programlisting role="shell">
    php -d error_reporting=4095 -l script_to_check.php
   </programlisting>
   <para>
    Para grandes projetos, o script shell abaixo irá atingir a mesma tarefa:
   </para>
   <programlisting role="shell">
<![CDATA[
#!/bin/sh

directory=$1

shift

# These extensions are checked
extensions="php inc"

check_file ()
{
  echo -ne "Doing PHP syntax check on $1 ..."

  # Options:
  ERRORS=`/www/php/bin/php -d display_errors=1 -d html_errors=0 -d error_prepend_string=" " -d error_append_string=" " -d error_reporting=4095 -l $1 | grep -v "No syntax errors detected"`

  if test -z "$ERRORS"; then
    echo -ne "OK."
  else
    echo -e "Errors found!\n$ERRORS"
  fi

  echo
}

# loop over remaining file args
for FILE in "$@" ; do
  for ext in $extensions; do
     if echo $FILE | grep "\.$ext$" > /dev/null; then
       if test -f $FILE; then
         check_file "$FILE"
       fi
     fi
  done
done
]]>
   </programlisting>
  </informalexample>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
