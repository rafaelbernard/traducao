<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 350871 Maintainer: ae Status: ready --><!-- CREDITS: rfoliveira,ae -->
 <chapter xml:id="features.http-auth" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Autenticação HTTP com PHP</title>

  <simpara>
   Pode-se utilizar a função
   <function>header</function> para enviar uma mensagem de <literal>"Authentication Required"</literal>
   para o browser cliente, causando o aparecimento de uma janela para a entrada de Nome de Usuário/Senha.
   Uma vez que o usuário preencha um nome de usuário e uma senha,
   a URL contendo o script PHP será chamada mais uma vez com as
   <link linkend="reserved.variables">variáveis predefinidas</link>
   <varname>PHP_AUTH_USER</varname>, <varname>PHP_AUTH_PW</varname>,
   e <varname>AUTH_TYPE</varname> para determinar o nome de usuário, senha e
   tipo da autenticação, respectivamente.  Estas variáveis predefinidas são encontradas
   nos arrays <varname>$_SERVER</varname>. Ambos os métodos de autenticação "Basic" e "Digest"
   (a partir do PHP 5.1.0) são suportados. Consulte a função
   <function>header</function> para mais informações.
  </simpara>

  <para>
   Um exemplo de fragmento de script que forçaria a autenticação
   do cliente em uma página:
  </para>
  <para>
   <example>
    <title>Exemplo de Autenticação HTTP "Basic"</title>
    <programlisting role="php">
<![CDATA[
<?php
if (!isset($_SERVER['PHP_AUTH_USER'])) {
    header('WWW-Authenticate: Basic realm="My Realm"');
    header('HTTP/1.0 401 Unauthorized');
    echo 'Texto enviado caso o usuário clique no botão Cancelar';
    exit;
} else {
    echo "<p>Olá, {$_SERVER['PHP_AUTH_USER']}.</p>";
    echo "<p>Você digitou {$_SERVER['PHP_AUTH_PW']} como sua senha.</p>";
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Exemplo de autenticação HTTP "Digest"</title>
    <para>
     Este exemplo demonstra como implementar um script simples de autenticação HTTP "Digest".
     Para mais informações, leia o <link
      xlink:href="&url.rfc;2617">RFC 2617</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$realm = 'Área restrita';

//usuário => senha
$users = array('admin' => 'mypass', 'guest' => 'guest');


if (empty($_SERVER['PHP_AUTH_DIGEST'])) {
    header('HTTP/1.1 401 Unauthorized');
    header('WWW-Authenticate: Digest realm="'.$realm.
           '",qop="auth",nonce="'.uniqid().'",opaque="'.md5($realm).'"');

    die('Texto enviado caso o usuário clique no botão Cancelar');
}


// analisar a variável PHP_AUTH_DIGEST
if (!($data = http_digest_parse($_SERVER['PHP_AUTH_DIGEST'])) ||
    !isset($users[$data['username']]))
    die('Credenciais inválidas!');


// gerar a resposta válida
$A1 = md5($data['username'] . ':' . $realm . ':' . $users[$data['username']]);
$A2 = md5($_SERVER['REQUEST_METHOD'].':'.$data['uri']);
$valid_response = md5($A1.':'.$data['nonce'].':'.$data['nc'].':'.$data['cnonce'].':'.$data['qop'].':'.$A2);

if ($data['response'] != $valid_response)
    die('Credenciais inválidas!');

// ok, nome de usuário e senha válidos
echo 'Você está logado como: ' . $data['username'];


// função para decompor o http auth header
function http_digest_parse($txt)
{
    // proteção contra dados incompletos
    $needed_parts = array('nonce'=>1, 'nc'=>1, 'cnonce'=>1, 'qop'=>1, 'username'=>1, 'uri'=>1, 'response'=>1);
    $data = array();
    $keys = implode('|', array_keys($needed_parts));

    preg_match_all('@(' . $keys . ')=(?:([\'"])([^\2]+?)\2|([^\s,]+))@', $txt, $matches, PREG_SET_ORDER);

    foreach ($matches as $m) {
        $data[$m[1]] = $m[3] ? $m[3] : $m[4];
        unset($needed_parts[$m[1]]);
    }

    return $needed_parts ? false : $data;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <title>Nota sobre compatibilidade</title>
   <para>
    Por favor, seja cauteloso ao codificar as linhas do cabeçalho HTTP. Para garantir máxima
    compatibilidade com todos os clientes, a palavra-chave "Basic" deve ser escrita com um
    "B" maiúsculo, a string realm deve ser envolvida por aspas duplas (nunca por aspas simples),
    e apenas um espaço deve preceder o código <emphasis>401</emphasis> na linha do cabeçalho
    <emphasis>HTTP/1.0 401</emphasis>. Parâmetros de autenticação precisam ser separados por
    vírgula, como visto no exemplo acima de digest.
   </para>
  </note>

  <para>
   Ao invés de simplesmente exibir <varname>PHP_AUTH_USER</varname>
   e <varname>PHP_AUTH_PW</varname>, como no exemplo acima,
   talvez queira verificar a validade do nome de usuário e senha.
   Talvez enviando uma consulta a um banco de dados, ou procurando
   o usuário em um arquivo dbm.
  </para>

  <para>
   Cuidado com browsers Internet Explorer bugados por aí. Eles
   parecem muito minuciosos sobre a ordem dos cabeçalhos. Enviar
   o cabeçalho <emphasis>WWW-Authenticate</emphasis> antes do
   cabeçalho <literal>HTTP/1.0 401</literal> parece resolver isso
   por enquanto.
  </para>

  <note>
   <title>Nota de configuração</title>
   <para>
    PHP usa uma diretiva chamada <literal>AuthType</literal>
    para determinar se autenticação externa está em efeito.
   </para>
  </note>

  <simpara>
   Perceba, entretanto, que a diretiva citada acima não previne que alguém que
   controle uma URL não autenticada roube senhas de
   URLs autenticadas no mesmo servidor.
  </simpara>
  <simpara>
   Tanto o Netscape Navigator quanto o Internet Explorer apagarão o cache de
   autenticação da janela local do browser para o realm após receber uma
   resposta 401 do servidor. Isso pode efetivamente "deslogar" um usuário,
   forçando o mesmo a re-entrar seu nome de usuário e senha. Algumas pessoas
   usam isso para delimitar o tempo de um login, ou prover um botão de "log-out".
  </simpara>
  <para>
   <example>
    <title>Exemplo de Autenticação HTTP forçando um novo nome/senha</title>
    <programlisting role="php">
<![CDATA[
<?php
function authenticate() {
    header('WWW-Authenticate: Basic realm="Test Authentication System"');
    header('HTTP/1.0 401 Unauthorized');
    echo "Você deve digitar um login e senha válidos para acessar este recurso\n";
    exit;
}

if (!isset($_SERVER['PHP_AUTH_USER']) ||
    ($_POST['SeenBefore'] == 1 && $_POST['OldAuth'] == $_SERVER['PHP_AUTH_USER'])) {
    authenticate();
} else {
    echo "<p>Bem-vindo: " . htmlspecialchars($_SERVER['PHP_AUTH_USER']) . "<br />";
    echo "Antigo: " . htmlspecialchars($_REQUEST['OldAuth']);
    echo "<form action='' method='post'>\n";
    echo "<input type='hidden' name='SeenBefore' value='1' />\n";
    echo "<input type='hidden' name='OldAuth' value=\"" . htmlspecialchars($_SERVER['PHP_AUTH_USER']) . "\" />\n";
    echo "<input type='submit' value='Re-autenticar' />\n";
    echo "</form></p>\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   Este comportamento não é requerido pelo padrão de autenticação <literal>HTTP Basic</literal>,
   então nunca se deve depender dele. Testes com
   <literal>Lynx</literal> tem mostrado que <literal>Lynx</literal> não apaga
   as credenciais de autenticação com uma resposta 401 do servidor, assim, ao pressionar "Voltar"
   e então "Ir" novamente abrirá o recurso contanto que os requerimento de credenciais
   não tenha mudado. Contudo, o usuário pode pressionar a tecla
   <literal>'_'</literal> para apagar suas informações de autenticação.
  </simpara>
  <simpara>
   Para fazer com que a autenticação HTTP funcione utilizando um servidor IIS com a versão CGI
   do PHP é necessário editar a configuração "<literal>Directory Security</literal>" do IIS.
   Clique em "<literal>Edit</literal>" e marque somente
   "<literal>Anonymous Access</literal>",
   deixe todos os outros campos desmarcados.
  </simpara>
  <note>
   <title>Nota sobre IIS:</title>
   <simpara>
    Para que a autenticação HTTP funcione com IIS, a diretiva do PHP
    <link linkend="ini.cgi.rfc2616-headers">cgi.rfc2616_headers</link> deve
    ser definida como <literal>0</literal> (o valor default).
   </simpara>
  </note>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
